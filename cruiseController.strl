%Cuise controller

module cruiseController:
  input On, Off, Resume, Set, QuickDecel, QuickAccel;
  input Accel : float;  
  input Brake : float;  
  input Speed : float;  

  constant SpeedMin : float;
  constant SpeedMax : float;
  constant SpeedInc : float;
  constant ThrottleSatMax : float;
  constant PedalsMin : float;

  output CruiseSpeed : float;
  output ThrottleCmd : float;
  output CruiseState : integer; % 0 OFF, 1 ON, 2 STANDBY, 3 DISABLE 


  output testing : integer; % 0 OFF, 1 ON, 2 STANDBY, 3 DISABLE 
  output testingModuleOutput : integer; % 0 OFF, 1 ON, 2 STANDBY, 3 DISABLE 
    
    emit CruiseState(0); %init the cruise state to OFF
    emit testing(0); %init the cruise state to OFF
    pause; %pause to allow for initialising
    
    %Cruise Control System
    [loop
      pause; % needed for loop
      trap T in
        present(Off) then
          emit CruiseState(0); 
          exit T
        else
          present(On) then
            emit CruiseState(1); % when off is not set And on is pressed then cruise will be on
            if ?Speed > SpeedMin and ?Speed < SpeedMax and ?Accel < pedalsMin and !Brake then
              emit CruiseState(1); % cruise state will be off when off is set
              exit T
            else
              emit CruiseState(3); % Disable
              exit T
          end if
          end present
        end present
  
        

      end trap
      % Button Manager
    end loop]
    ||
    [
    loop
      pause;
      emit testing(pre(?testing) + 1);
      %run testRun[signal testing/testInput; signal testingOutput/testingModuleOutput];
    end loop
    ]

end module

module testRun:
  input testInput : integer
  output testOutput : integer 

  emit testOutput(?testInput + 5);
end module
 
