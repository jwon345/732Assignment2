%Cuise controller

module cruiseController:
  input On, Off, Resume, Set, QuickDecel, QuickAccel;
  input Accel : float;  
  input Brake : float;  
  input Speed : float;  

  constant SpeedMin : float;
  constant SpeedMax : float;
  constant SpeedInc : float;
  constant ThrottleSatMax : float;
  constant PedalsMin : float;

  output CruiseSpeed : float;
  output ThrottleCmd : float;
  output CruiseState : integer; % 0 OFF, 1 ON, 2 STANDBY, 3 DISABLE 

%this is just for temporary testing
  output isCruiseControllerOn;
  output moduleRelay;

    
  emit CruiseState(0); %init the cruise state to OFF
    
  signal AllowCC := 0 : integer, safeTrigger in  % AllowCC 0 = not enable, 1 = Disable mode, 2 = Break -> standby
      %Cruise Control System

      [loop
        pause;
        trap A in 

          present(Off) then %takes priority over everything
            emit CruiseState(0); %cruise controll is prioritiesed and sets to 0 
            exit A;
          end present

          if pre(CruiseState) = 0 then
            present(On) then % Only switch on from Off
              emit CruiseState(1); %cruise controll is off when off is set
              exit A;
            end present
            emit CruiseState(0);
            exit A;
          end if 

          if pre(CruiseState) = 1 then
            
            % State On -> standby
            if (?Break > PedalsMin) then
              emit CruiseState(2);
              exit A;
            end if 

            % State On -> Disable 
            if (?Speed > SpeedMax) then
              emit CruiseState(3);
              exit A;
            end if 
            if (?Speed < SpeedMin) then
              emit CruiseState(3);
              exit A;
            end if 
            if (?Accel > PedalsMin) then
              emit CruiseState(3);
              exit A;
            end if 

            emit CruiseState(1); 
            exit A;

          end if 

          if pre(CruiseState) = 2 then
            
            if ?Break < PedalsMin then
              if ?Speed > SpeedMin and ?Speed < SpeedMax and ?Accel < PedalsMin and ?Brake < PedalsMin then
                emit CruiseState(1); % State Standby -> On
                exit A;
              else
                emit CruiseState(3); % State Standby -> Disable 
                exit A;
              end if 
            
            emit CruiseState(2); 
            exit A;
          end if 

          if pre(CruiseState) = 3 then 

            % State Disable -> standby
            if (?Break > PedalsMin) then
              emit CruiseState(2);
              exit A;
            end if 
            
            if ?Speed > SpeedMin and ?Speed < SpeedMax and ?Accel < PedalsMin and ?Brake < PedalsMin then
              emit CruiseState(1); % State Disable -> On
              exit A;
            end if

            emit CruiseState(3); 
            exit A;
          end if 

        end trap
      end loop]
      ||
      run SpeedController[
      signal isCruiseControllerOn/ccOn;
      signal moduleRelay/relay
      ]

  end signal 

end module

module SpeedController:
input ccOn; 
output relay; 



  loop 
  pause;
   present ccOn then
    
  end present
  end loop
end module 
