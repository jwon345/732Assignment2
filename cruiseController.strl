%Cuise controller

module cruiseController:
  input On, Off, Resume, Set, QuickDecel, QuickAccel;
  input Accel : float;  
  input Brake : float;  
  input Speed : float;  

  constant SpeedMin : float;
  constant SpeedMax : float;
  constant SpeedInc : float;
  constant ThrottleSatMax : float;
  constant PedalsMin : float;

  output CruiseSpeed : float;
  output ThrottleCmd : float;
  output CruiseState : integer; % 0 OFF, 1 ON, 2 STANDBY, 3 DISABLE 

%this is just for temporary testing
  output isCruiseControllerOn;
  output moduleRelay;

    
    emit CruiseState(0); %init the cruise state to OFF
    
signal AllowCC := 0 : integer, safeTrigger in  % AllowCC 0 = not enable, 1 = Disable mode, 2 = Break -> standby
    %Cruise Control System
    [loop
	pause;
        present(Off) then
          emit CruiseState(0); %cruise controll is off when off is set
        else
		if pre(?CruiseState) = 1 then
		    if pre(?AllowCC) = 2 then
          emit CruiseState(2); % Standby from brakes
          await Resume;
          emit CruiseState(1); % return to on
		    elsif pre(?AllowCC) = 0 then
          emit CruiseState(3);
          await safeTrigger;
          emit CruiseState(1);
		    elsif ?AllowCC = 1 then
		      emit CruiseState(1); % cruise state will be On
          emit isCruiseControllerOn; % this one feed into the module
		    end if
		elsif pre(?CruiseState) = 3 then
			%?AllowCC = 1;			
			await safeTrigger;
			emit CruiseState(1);
		else	
		  present(On) then
		    if ?AllowCC = 1 then
		      emit CruiseState(1); % cruise state will be On
          emit isCruiseControllerOn; % this one feed into the module
		    else
		      emit CruiseState(3); % cruise state will be Disabled when not meeting requirements
		    end if
		  end present
		end if
        end present
      % Button Manager
    end loop]
    ||
    [% state decision looker
    loop
	pause;
	      if ?Brake > PedalsMin then
		if ?CruiseState = 1 then
			emit AllowCC(2);
			await Resume;
		end if
	      elsif ?Speed > SpeedMin and ?Speed < SpeedMax and ?Accel < PedalsMin and ?Brake < PedalsMin then
		emit AllowCC(1);
		emit safeTrigger;
	      else
		emit AllowCC(0); % Disable state
		if pre(?CruiseState) = 1 then
			emit CruiseState(3);
		end if	
	      end if 
    end loop
    ]
    ||
    run SpeedController[
    signal isCruiseControllerOn/ccOn;
    signal moduleRelay/relay
    ]

end signal 

end module

module SpeedController:
input ccOn; 
output relay; 
  loop 
   present ccOn then
    emit relay;
  end present
  end loop
end module 
